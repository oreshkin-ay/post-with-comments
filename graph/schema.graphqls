input NewPostInput {
  title: String!
  content: String!
  commentsDisabled: Boolean!
}

input NewCommentInput {
  postId: ID!
  text: String!
  parentCommentId: ID
}

type Post {
  id: ID!
  title: String!
  content: String!
  user: User!
  commentsDisabled: Boolean!
  comments(parentCommentId: ID, cursor: String, limit: Int): CommentConnection!
}

type Comment {
  id: ID!
  postId: ID!
  text: String!
  parentCommentId: ID
  createdAt: String!
  children(cursor: String, limit: Int): CommentConnection!  
  childCommentCount: Int!
}

type PostEdge {
  cursor: String!
  node: Post!
}

type CommentEdge {
  cursor: String!
  node: Comment!
}

type CommentConnection {
  edges: [CommentEdge!]!   
  pageInfo: PageInfo!
}

type PostConnection {
  edges: [PostEdge!]!
  pageInfo: PageInfo!
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
}

input RefreshTokenInput {
  token: String!
}

input NewUser {
  username: String!
  password: String!
}

input Login {
  username: String!
  password: String!
}

type User {
  id: ID!
  name: String!
}

input UpdateCommentsDisabledInput {
  postId: ID!
  commentsDisabled: Boolean!
}

type Query {
  posts(cursor: String, limit: Int, commentsLimit: Int): PostConnection!  
  post(id: ID!, parentCommentId: ID, cursor: String, limit: Int): Post!
}

type Mutation {
  createPost(input: NewPostInput!): Post!
  createComment(input: NewCommentInput!): Comment!
  updateCommentsDisabled(input: UpdateCommentsDisabledInput!): Post!

  createUser(input: NewUser!): String!
  login(input: Login!): String!
  refreshToken(input: RefreshTokenInput!): String!
}

 type Subscription {
  newComment(postId: ID!): Comment!
}