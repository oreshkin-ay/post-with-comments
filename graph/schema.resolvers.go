package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"
	"strconv"

	"github.com/oreshkin/posts/graph/model"
	"github.com/oreshkin/posts/internal/comments"
	"github.com/oreshkin/posts/internal/posts"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPostInput) (*model.Post, error) {
	var post posts.Post
	post.Title = input.Title
	post.Content = input.Content
	post.CommentsDisabled = input.CommentsDisabled

	postID := post.Save()

	return &model.Post{
		ID:               strconv.FormatInt(postID, 10),
		Title:            post.Title,
		Content:          post.Content,
		CommentsDisabled: post.CommentsDisabled,
	}, nil
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.NewCommentInput) (*model.Comment, error) {
	var comment comments.Comment
	postIDInt, err := strconv.ParseInt(input.PostID, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("invalid post ID: %v", err)
	}
	comment.PostID = postIDInt

	comment.Text = input.Text

	if input.ParentCommentID != nil {
		parentIDInt, err := strconv.ParseInt(*input.ParentCommentID, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid parent ID: %v", err)
		}
		comment.ParentCommentID = &parentIDInt
	} else {
		comment.ParentCommentID = nil
	}

	commentID := comment.Save()

	var parentIDStr *string
	if comment.ParentCommentID != nil {
		parentIDStr = new(string)
		*parentIDStr = strconv.FormatInt(*comment.ParentCommentID, 10)
	}

	return &model.Comment{
		ID:              strconv.FormatInt(commentID, 10),
		PostID:          strconv.FormatInt(comment.PostID, 10),
		Text:            comment.Text,
		ParentCommentID: parentIDStr,
	}, nil
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context, cursor *string, limit *int) (*model.PostConnection, error) {
	defaultLimit := 10
	if limit != nil {
		defaultLimit = *limit
	}

	var parsedCursor *int64
	if cursor != nil {
		parsedCursorValue, err := strconv.ParseInt(*cursor, 10, 64)
		if err != nil {
			return &model.PostConnection{
				Edges:    []*model.PostEdge{},
				PageInfo: &model.PageInfo{EndCursor: "", HasNextPage: false},
			}, nil
		}
		parsedCursor = &parsedCursorValue
	}

	posts, lastPostID, err := posts.GetPostsWithPagination(defaultLimit, parsedCursor)
	if err != nil {
		return &model.PostConnection{
			Edges:    []*model.PostEdge{},
			PageInfo: &model.PageInfo{EndCursor: "", HasNextPage: false},
		}, nil
	}

	var edges []*model.PostEdge
	for _, post := range posts {
		edges = append(edges, &model.PostEdge{
			Cursor: strconv.FormatInt(post.ID, 10),
			Node: &model.Post{
				ID:               strconv.FormatInt(post.ID, 10),
				Title:            post.Title,
				Content:          post.Content,
				CommentsDisabled: post.CommentsDisabled,
			},
		})
	}

	hasNextPage := len(posts) == defaultLimit

	var endCursor string
	if lastPostID != nil {
		endCursor = strconv.FormatInt(*lastPostID, 10)
	} else {
		endCursor = ""
	}

	return &model.PostConnection{
		Edges: edges,
		PageInfo: &model.PageInfo{
			EndCursor:   endCursor,
			HasNextPage: hasNextPage,
		},
	}, nil
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id string, parentCommentID *string, cursor *string, limit *int) (*model.Post, error) {
	defaultLimit := 10
	if limit != nil {
		defaultLimit = *limit
	}

	post, err := posts.GetPostByID(id)
	if err != nil {
		return nil, fmt.Errorf("failed to fetch post by ID: %w", err)
	}
	if post == nil {
		return nil, fmt.Errorf("post with ID %s not found", id)
	}

	var parsedCursor *int64
	if cursor != nil {
		parsedCursorValue, err := strconv.ParseInt(*cursor, 10, 64)
		if err != nil {
			return comments.EmptyPostWithNoComments(post.ID, post.Title, post.Content, post.CommentsDisabled), nil
		}
		parsedCursor = &parsedCursorValue
	}

	fetchedComments, err := comments.GetCommentsByPostIDWithPagination(post.ID, parsedCursor, defaultLimit, parentCommentID)
	if err != nil || len(fetchedComments) == 0 {
		return comments.EmptyPostWithNoComments(post.ID, post.Title, post.Content, post.CommentsDisabled), nil
	}

	var commentEdges []*model.CommentEdge
	for _, comment := range fetchedComments {
		var parentIDStr *string
		if comment.ParentCommentID != nil {
			parentIDStr = new(string)
			*parentIDStr = strconv.FormatInt(*comment.ParentCommentID, 10)
		}

		commentEdges = append(commentEdges, &model.CommentEdge{
			Cursor: strconv.FormatInt(comment.ID, 10),
			Node: &model.Comment{
				ID:              strconv.FormatInt(comment.ID, 10),
				PostID:          strconv.FormatInt(comment.PostID, 10),
				Text:            comment.Text,
				ParentCommentID: parentIDStr,
				CreatedAt:       comment.CreatedAt,
			},
		})
	}

	var lastCommentCursor *string
	if len(fetchedComments) > 0 {
		lastCommentID := fetchedComments[len(fetchedComments)-1].ID
		lastCommentCursorStr := strconv.FormatInt(lastCommentID, 10)
		lastCommentCursor = &lastCommentCursorStr
	}

	hasNextPage := len(fetchedComments) == defaultLimit

	commentConnection := &model.CommentConnection{
		Edges: commentEdges,
		PageInfo: &model.PageInfo{
			EndCursor:   comments.LastCommentCursorOrDefault(lastCommentCursor),
			HasNextPage: hasNextPage,
		},
	}

	return &model.Post{
		ID:               strconv.FormatInt(post.ID, 10),
		Title:            post.Title,
		Content:          post.Content,
		CommentsDisabled: post.CommentsDisabled,
		Comments:         commentConnection,
	}, nil
}

// CommentAdded is the resolver for the commentAdded field.
func (r *subscriptionResolver) CommentAdded(ctx context.Context, postID string) (<-chan *model.Comment, error) {
	panic(fmt.Errorf("not implemented: CommentAdded - commentAdded"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
