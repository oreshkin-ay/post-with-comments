package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"
	"strconv"

	"github.com/oreshkin/posts/graph/model"
	"github.com/oreshkin/posts/internal/comments"
	"github.com/oreshkin/posts/internal/posts"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPostInput) (*model.Post, error) {
	var post posts.Post
	post.Title = input.Title
	post.Content = input.Content
	post.CommentsDisabled = input.CommentsDisabled

	postID := post.Save()

	return &model.Post{
		ID:               strconv.FormatInt(postID, 10),
		Title:            post.Title,
		Content:          post.Content,
		CommentsDisabled: post.CommentsDisabled,
	}, nil
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.NewCommentInput) (*model.Comment, error) {

	var comment comments.Comment
	postIDInt, err := strconv.ParseInt(input.PostID, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("invalid post ID: %v", err)
	}
	comment.PostID = postIDInt

	comment.Text = input.Text

	if input.ParentID != nil {
		parentIDInt, err := strconv.ParseInt(*input.ParentID, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid parent ID: %v", err)
		}
		comment.ParentID = &parentIDInt
	} else {
		comment.ParentID = nil
	}

	commentID := comment.Save()

	var parentIDStr *string
	if comment.ParentID != nil {
		parentIDStr = new(string)
		*parentIDStr = strconv.FormatInt(*comment.ParentID, 10)
	}

	return &model.Comment{
		ID:       strconv.FormatInt(commentID, 10),
		PostID:   strconv.FormatInt(comment.PostID, 10),
		Text:     comment.Text,
		ParentID: parentIDStr,
	}, nil
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context, after *string, limit *int) (*model.PostConnection, error) {
	panic(fmt.Errorf("not implemented: Posts - posts"))
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id string) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: Post - post"))
}

// CommentAdded is the resolver for the commentAdded field.
func (r *subscriptionResolver) CommentAdded(ctx context.Context, postID string) (<-chan *model.Comment, error) {
	panic(fmt.Errorf("not implemented: CommentAdded - commentAdded"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
